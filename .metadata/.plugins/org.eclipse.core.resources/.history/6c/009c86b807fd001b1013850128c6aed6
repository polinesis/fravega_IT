package com.example.microservicios.app.sucursales.controllers;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.commons.controllers.CommonController;
import com.example.commons.sucursales.models.entity.Sucursal;
import com.example.microservicios.app.sucursales.model.PuntoRetiro;
import com.example.microservicios.app.sucursales.services.SucursalService;

@RestController
public class SucursalController extends CommonController<Sucursal, SucursalService>{

	@PostMapping("/crearSucursales")
	public ResponseEntity<?> crear( @RequestBody Iterable<Sucursal> sucursales){
	
		Iterable<Sucursal> respuestasDb = service.saveAll(sucursales);
		
		return ResponseEntity.status(HttpStatus.CREATED).body(respuestasDb);
		
	}

	
	@GetMapping("/sucursalMasCernaca")
	public ResponseEntity<?> obtenerSucursalMasCernaca(@RequestBody PuntoRetiro puntoRetiro){
		
	
		Map<Double, Long> mapDistanciaSucu = new HashMap<>();
		List<Sucursal> sucursales = (List<Sucursal>) service.findAll();
		Sucursal sucursalMasCercana = new Sucursal();
		PuntoRetiro puntoRetiroResultado = new PuntoRetiro(); 
		
		if(sucursales.isEmpty()) {
			return ResponseEntity.notFound().build();
		}else {
			
			
			// cargamos todas las distancias y sucursales
			for (Sucursal sucursal : sucursales) {
				mapDistanciaSucu.put(service.obtenerSucursalMasCernaca(puntoRetiro, sucursal), sucursal.getId());
			}
			
		    // ordenamos las distancias de menor a mayor 
			 Map<Double, Long> sortedByValue = mapDistanciaSucu.entrySet()
			 .stream()
			 .sorted(Map.Entry.<Double, Long>comparingByValue(Collections.reverseOrder()))
			 .collect(Collectors.toMap(Map.Entry::getKey, 
					  					Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));

			 // aca obtenemos la primer distancia	
			 Map.Entry<Double, Long> mapsucursalMasCercana = sortedByValue.entrySet()
			 .stream()
			 .findFirst()
			 .get();
			 
			 //buscamos la sucursal mas cercana para el punto de referencia si no la econtramos informamos lo sucedido
			 Optional<Sucursal> o = service.findById(mapsucursalMasCercana.getValue());
			 if(!o.isPresent()) {
					return ResponseEntity.notFound().build();
			 }
			 
			 Sucursal sucursal =  o.get();
			 
			 sucursalMasCercana.setId(sucursal.getId());
			 sucursalMasCercana.setDireccion(sucursal.getDireccion());
			 sucursalMasCercana.setHorarioAtencion(sucursal.getHorarioAtencion());
			 sucursalMasCercana.setLatitud(sucursal.getLatitud());
			 sucursalMasCercana.setLongitud(sucursal.getLongitud());
			 
		}
		
		// devolvemos el resultado de la sucursal mas cercana de acuerdo al punto de referencia
		puntoRetiroResultado

		return ResponseEntity.ok(sucursales);
		
	}
}
