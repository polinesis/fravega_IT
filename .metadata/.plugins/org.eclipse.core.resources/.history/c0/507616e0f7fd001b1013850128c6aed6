package com.example.microservicios.app.sucursales;


import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Optional;

import javax.validation.ConstraintViolationException;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.ResponseEntity;

import com.example.commons.sucursales.models.entity.Sucursal;
import com.example.microservicios.app.sucursales.controllers.SucursalController;



@SpringBootTest
class MicroservicioSucursalesApplicationTests {

	
	@Autowired
	SucursalController sucursalController;
	
	/*
	 * probamos caso exitoso de creacion de sucursal
	 * */
	@Test
	void testCrear() {
		
		Sucursal sucursal = new Sucursal();
		
		int numeroAleatorio = (int) (Math.random()*25+1);
		sucursal.setDireccion("TEST - angel gallardo numero:"+numeroAleatorio);
		sucursal.setHorarioAtencion("TEST - Lunes a viernes de 9 a 3");
		sucursal.setLatitud(-34.57060);
		sucursal.setLongitud(-58.72734);
		
		/*
		Sucursal  sucursalSave = sucursalController.getService().save(sucursal);
		Optional<Sucursal> o = sucursalController.getService().findById(sucursalSave.getId());
		
		Sucursal sucursalBd =  o.get();
		
		assertEquals("TEST - angel gallardo numero:"+numeroAleatorio+"", sucursalBd.getDireccion());
		*/
	}
	
	/*
	 * probamos que no se debe crear sucursales al agregar direccion en null
	 * */
	@Test
	void testErrorCrear() {
		
		Sucursal sucursal = new Sucursal();
		
		sucursal.setDireccion(null);
		sucursal.setHorarioAtencion("TEST - Lunes a viernes de 9 a 3");
		sucursal.setLatitud(-34.57060);
		sucursal.setLongitud(-58.72734);
		
		Sucursal  sucursalSave = null;
		
		try {
		
			sucursalSave = sucursalController.getService().save(sucursal);
		
		}catch (ConstraintViolationException e) {
			e.printStackTrace();
		}
		
		assertNull(sucursalSave);
		
	}
	
	/*
	 * probamos la devolucion de todas las sucursales
	 * */
	@Test
	void getSucursales() {
		
		assertNotNull(sucursalController.getService().findAll());
		
	}
	
	/*
	 * aca vamos a probar calculo de distancia 
	 * 
	 * */
	@Test
	void obtenerSucursalMasCernaca() {
		
		assertNotNull(sucursalController.getService().findAll());
		
	}
	
	
	
	

}
