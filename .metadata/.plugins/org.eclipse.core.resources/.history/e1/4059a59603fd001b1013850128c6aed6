package com.example.microservicios.app.sucursales.controllers;


import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.commons.controllers.CommonController;
import com.example.commons.sucursales.models.entity.Sucursal;
import com.example.microservicios.app.sucursales.model.PuntoRetiro;
import com.example.microservicios.app.sucursales.services.SucursalService;

@RestController
public class SucursalController extends CommonController<Sucursal, SucursalService>{

	@PostMapping("/crearSucursales")
	public ResponseEntity<?> crear( @RequestBody Iterable<Sucursal> sucursales){
	
		Iterable<Sucursal> respuestasDb = service.saveAll(sucursales);
		
		return ResponseEntity.status(HttpStatus.CREATED).body(respuestasDb);
		
	}

	
	@GetMapping("/sucursalMasCernaca")
	public ResponseEntity<?> obtenerSucursalMasCernaca(@RequestBody PuntoRetiro puntoRetiro){
		
	
		Map<Double, Long> map = new HashMap<>();
		
		List<Sucursal> sucursales = ((List<Sucursal>) service.findAll()).stream().map(
									s ->{
										 map.put(service.obtenerSucursalMasCernaca(puntoRetiro, s), s.getId());
										 return s;
									}
				).collect(Collectors.toList());		
				
		    
		 Map<Double, Long> sortedByValue = map.entrySet()
		 .stream()
		 .sorted(Map.Entry.<Double, Long>comparingByValue(Collections.reverseOrder()))
		 .collect(Collectors.toMap(Map.Entry::getKey, 
				  					Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));

		 	
		
		  Map<Double, Long> finalResult = new HashMap<>();
		  double maxValue = -1;
		  for(Entry<Double, Long> entry: sortedByValue.entrySet()){
		      if(maxValue<0){
		          maxValue = entry.getKey();
		      }
		      if(entry.getKey()>=maxValue){
		          finalResult.put(entry.getKey(),entry.getValue());
		      }else{
		          break;
		      }
		  }  
		return ResponseEntity.ok(sucursales);
		
	}
}
